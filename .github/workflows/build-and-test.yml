name: Build and Test

####################################################################################################
##  WORKFLOW TRIGGER
####################################################################################################
on:
  # Workflow will run on any pull request to main.
  pull_request:
    branches:
      - main

####################################################################################################
##  WORKFLOW JOBS
####################################################################################################
jobs:
  build_and_test:
    name: Build and test projects
    # Using the latest Windows GitHub-hosted runner.
    runs-on: windows-latest
    # The matrix is used to define the frameworks that the project(s) support.
    # For each value in the matrix a concurrent version of the job is run using that value.
    strategy:
      matrix:
        target_framework: [ net6.0, netcoreapp3.1, net48 ]

    steps:
      # Using Github checkout action to retrieve the codebase.
      - name: Fetch code
        uses: actions/checkout@v3
      
      # Using dotnet build to build the solution using a target framework specified in the matrix.
      - name: Build ${{ matrix.target_framework }}
        run: dotnet build --configuration Release --framework ${{ matrix.target_framework }}
      
      # Using dotnet test to run any unit tests found in the solution using a target framework specified in the matrix.
      # If any test fails, the job and workflow will fail.
      - name: Test ${{ matrix.target_framework }}
        run: dotnet test --configuration Release --no-build --verbosity normal --framework ${{ matrix.target_framework }}
      
      # Using GitHub upload-artifact action to persist the workspace for the next job.
      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./

  # code_analysis job runs code analysis scans against the codebase looking for vulnerabilities.
  code_analysis:
    name: Run code analysis
    # This job will not run until build_and_test is complete and passes.
    needs: build_and_test
    # Using the latest Ubuntu GitHub-hosted runner.
    runs-on: ubuntu-latest
    # Creates output variables to be used in steps or other jobs.
    outputs: 
      scan_exclusions: ${{ steps.scan-exclusions.outputs.scan_exclusions }}
    
    steps:
      # Using GitHub download-artifact action to get the workspace from the last job.
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      # Creates a comma separated list of directories or files to exclude from code scans.
      - name: Find test or example project(s)
        id: scan-exclusions
        shell: pwsh
        run: |
          # Filter to only Test and Example projects and add them to scanExclusions.
          $scanExclusions = Get-ChildItem -Directory | Select-Object Name
          $scanExclusions = $scanExclusions | Where-Object { ($_ -Match 'Tests') -or ($_ -Match 'Example') }
          $scanExclusions = $scanExclusions | ConvertTo-CSV -Delimiter ',' -NoTypeInformation | Select-Object -Skip 1

          # Set output.
          echo "::set-output name=scan_exclusions::$scanExclusions"

      # Using Snyk provided action for dotnet projects.
      - name: Run Snyk test
        uses: snyk/actions/dotnet@master
        # Continue on error needs to be set to true to upload the results at the end.
        continue-on-error: true 
        env:
          # Uses SNYK_TOKEN from org secrets
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --exclude=${{ steps.scan-exclusions.outputs.scan_exclusions }} --sarif-file-output=snyk.sarif

      # Use GitHub code scanning action to upload Snyk results to repo Security tab.
      - name: Upload Snyk result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
