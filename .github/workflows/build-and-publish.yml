# TODO: Any other scans to be run before publishing like CodeQL?
name: Build and Publish

# TODO: Need to determine trigger for running this workflow.
# Trigger workflow from a GitHub release?
on: [ push ]
  #push:
    #branches: [main]
  #pull_request:
    #branches: [main]

jobs:
  fetch_code:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./
  
  check_diff:
    runs-on: windows-latest
    outputs: 
      diff: ${{ steps.check-diff.outputs.diff }}
      hasChanges: ${{ steps.check-diff.outputs.hasChanges }}
  
    steps:
      - name: Fetch commit history
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0

      - name: Get branch name (not pull request)
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF_NAME})" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - name: Check diff
        id: check-diff
        shell: pwsh
        run: |
          # Get the diff between this branch and main.
          $diff = git diff --name-only origin/main..${{ env.BRANCH_NAME }}

          # Filter to only changed csproj files, excluding tests and examples.
          $projChanged = $diff | Where-Object { $_ -Match '.csproj$' }
          # $projChanged = $projChanged | Where-Object { $_ -NotMatch '.Tests.csproj$' }
          $projChanged = $projChanged | Where-Object { $_ -NotMatch 'Example.' }
          $projChanged = $projChanged | ForEach-Object -Process { $_.Remove(0, $_.IndexOf('/') + 1).Replace(".csproj","") }
          
          # Set hasChanges to true if there are any changed projects after filtering.
          $hasChanges = $projChanged.Length -gt 0

          # If there are changed projects, convert to JSON array.
          if ($hasChanges)
          {
            $projChangedJSON = ConvertTo-Json -Compress $projChanged
          }
          # Else, set to none.
          else
          {
            $projChangedJSON = "none" | ConvertTo-Json -Compress -AsArray
          }
          
          # Set output.
          echo "::set-output name=hasChanges::$hasChanges"
          echo "::set-output name=diff::$projChangedJSON"

  build_and_test:
    needs: fetch_code
    runs-on: windows-latest
    strategy:
      matrix:
        target_framework: [ net6.0, netcoreapp3.1, net48 ]

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace
          
      - name: Build ${{ matrix.target_framework }}
        run: dotnet build --configuration Release --framework ${{ matrix.target_framework }}
      
      - name: Test ${{ matrix.target_framework }}
        run: dotnet test --configuration Release --no-build --verbosity normal --framework ${{ matrix.target_framework }}

      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./
  
  ok_to_publish:
    name: ok_to_publish_${{ matrix.package }}
    needs: [ check_diff, build_and_test ]
    if: needs.check_diff.outputs.hasChanges
    environment: 
      name: Release ${{ matrix.package }}
      url: ${{ matrix.package }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix: 
        package: ${{ fromJSON(needs.check_diff.outputs.diff) }}

    steps:
      - name: Package ${{ matrix.package }} approved
        run: echo "Package ${{ matrix.package }} approved for publishing."
  
  # TODO: Need to dynamically set paths and names based on approved project.
  pack_and_publish:
    name: pack_and_publish_${{ matrix.package }}
    needs: [ check_diff, ok_to_publish ]
    runs-on: windows-latest
    if: needs.check_diff.outputs.hasChanges
    environment: 
      name: Release ${{ matrix.package }}
      url: ${{ matrix.package }}
    strategy:
      fail-fast: false
      matrix: 
        package: ${{ fromJSON(needs.check_diff.outputs.diff) }}
  
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      - name: Set environment variable for publishing
        shell: pwsh
        run: |
          # Set project to pack.
          $csproj = "${{ matrix.package }}.csproj"
          echo "CSPROJ=$csproj" >> $env:GITHUB_ENV

          # Set package name for publishing.
          $package_id = $csproj.SelectSingleNode("/Project/PropertyGroup/PackageId").InnerText
          echo "PACKAGE_ID=$package_id" >> $env:GITHUB_ENV

          # Set version number for publishing.
          $package_version = $csproj.SelectSingleNode("/Project/PropertyGroup/PackageVersion").InnerText
          echo "PACKAGE_VERSION=$package_version" >> $env:GITHUB_ENV

          echo "project             - $csproj"
          echo "package id          - $package_id"
          echo "package version     - $package_version"


      - name: Package
        run: dotnet pack ${{ env.CSPROJ }} --configuration Release --no-build --output nupkgs

      - name: Directory structure for determining path to package for publishing
        run: tree
      
      # TODO: Need to actually publish the package (swap in commented code).
      - name: Publish
        run: echo "nupkgs/${{ env.PACKAGE_ID }}.${{ env.PACKAGE_VERSION }}.nupkg"
        # env:
        #  API_KEY: ${{ secrets.NUGET_API_KEY }}
        # run: dotnet nuget push nupkgs/${{ env.PACKAGE_ID }}.${{ env.PACKAGE_VERSION }}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ env:API_KEY }}
