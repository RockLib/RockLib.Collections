name: Build and Test

on: [push]
  #push:
    #branches: [main]
  #pull_request:
    #branches: [main]

jobs:
  fetch_code:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./

  build_and_test_net6_0:
    needs: fetch_code
    runs-on: windows-latest

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace
      
      - name: Build .NET 6
        run: dotnet build --configuration Release --framework net6.0
      
      - name: Test .NET 6
        run: dotnet test --no-restore --verbosity normal --framework net6.0

  build_and_test_netcoreapp3_1:
    needs: fetch_code
    runs-on: windows-latest

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      - name: Build .NET Core 3.1
        run: dotnet build --configuration Release --framework netcoreapp3.1

      - name: Test .NET Core 3.1
        run: dotnet test --no-restore --verbosity normal --framework netcoreapp3.1

  build_and_test_net48:
    needs: fetch_code
    runs-on: windows-latest

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace
      
      - name: Build .NET Framework 4.8
        run: dotnet build --configuration Release --framework net48

      - name: Test .NET Framework 4.8
        run: dotnet test --no-restore --verbosity normal --framework net48

  # build_and_test:
  #   needs: initialize
  #   runs-on: windows-latest
    
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: NuGet/setup-nuget@v1.0.5
  #     - uses: microsoft/setup-msbuild@v1

  #     - name: Get .sln
  #       shell: pwsh
  #       run: |
  #         $sln = Get-ChildItem "*.sln" -Name
  #         echo "SLN_NAME=$sln" >> $env:GITHUB_ENV

  #     - name: Install dependencies
  #       run: dotnet restore

  #     - name: Restore 4.8 packages
  #       run: nuget restore ${{ env.SLN_NAME }}

  #     - name: Build 4.8
  #       run: msbuild ${{ env.SLN_NAME }} /p:Configuration=Release

  #     - name: Build
  #       run: dotnet build "./${{ env.SLN_NAME }}" --configuration Release --no-restore
        
  #     - name: Test
  #       run: dotnet test "./${{ env.SLN_NAME }}" --no-restore --verbosity normal

  
  ok_to_publish:
    needs: [build_and_test_net6_0, build_and_test_netcoreapp3_1, build_and_test_net48]
    environment: Release
    runs-on: windows-latest
    steps:
      - run: echo "Steps are required in jobs. An action is required in steps."
    
  publish:
    needs: ok_to_publish
    runs-on: windows-latest
  
    steps:
      - uses: actions/checkout@v3
      - uses: NuGet/setup-nuget@v1.0.5
      - uses: microsoft/setup-msbuild@v1
      - name: Set Env Variables
        run: |
          $repo_name = "${{ github.event.repository.name }}"
          $csproj_path = "./$repo_name/RockLib.Collections.csproj"
          $csproj = [xml](Get-Content $csproj_path)
          $package_id = $csproj.SelectSingleNode("/Project/PropertyGroup/PackageId").InnerText
          $package_version = $csproj.SelectSingleNode("/Project/PropertyGroup/PackageVersion").InnerText

          echo "$repo_name"
          echo "$csproj_path"
          echo "REPO_NAME=$repo_name" >> $env:GITHUB_ENV
          echo "PACKAGE_ID=$package_id" >> $env:GITHUB_ENV
          echo "PACKAGE_VERSION=$package_version" >> $env:GITHUB_ENV

      - name: Package 
        run: | 
          dotnet --list-sdks
          nuget restore ${{ env.REPO_NAME }}/${{ env.PACKAGE_ID }}.csproj
          msbuild ${{ env.REPO_NAME }}/${{ env.PACKAGE_ID }}.csproj -t:Pack
          #dotnet pack ${{ env.REPO_NAME }}/${{ env.PACKAGE_ID }}.csproj --configuration Release #--no-build -o "./"
      
      - name: Publish
        run: echo "${{ env.REPO_NAME }}/bin/Release/${{ env.PACKAGE_ID }}.${{ env.PACKAGE_VERSION }}.nupkg"
        #env:
        #  API_KEY: ${{ secrets.[NUGET_API_KEY] }}

        #TODO Replace package_version with an env that grabs the correct package version. Also replace RockLib.Collections with an env.
 #       run: dotnet nuget push "RockLib.Collections/bin/Release/RockLib.Collections.${{ env.PACKAGE_VERSION }}.nupkg" -s "https://api.nuget.org/v3/index.json" -k "$env:API_KEY" 
