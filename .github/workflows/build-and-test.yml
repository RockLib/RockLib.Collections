# TODO: Any other scans to be run before publishing like CodeQL?
name: Build and Test

# TODO: Need to determine trigger for running this workflow.
# Trigger workflow from a GitHub release?
on: [ push ]
  #push:
    #branches: [main]
  #pull_request:
    #branches: [main]

jobs:
  fetch_code:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./

  build_and_test:
    needs: fetch_code
    runs-on: windows-latest
    strategy:
      matrix:
        target_framework: [ net6.0, netcoreapp3.1, net48 ]

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace
          
      - name: Build ${{ matrix.target_framework }}
        run: dotnet build --configuration Release --framework ${{ matrix.target_framework }}
      
      - name: Test ${{ matrix.target_framework }}
        run: dotnet test --configuration Release --no-build --verbosity normal --framework ${{ matrix.target_framework }}

      - name: Upload workspace
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./
  
  # TODO: Need to set up approvals for multi-project solutions.
  ok_to_publish:
    needs: build_and_test
    environment: Release
    runs-on: windows-latest
    steps:
      - run: echo "Publish package approved."
  
  # TODO: Need to dynamically set paths and names based on approved project.
  pack_and_publish:
    needs: ok_to_publish
    runs-on: windows-latest
  
    steps:
      - name: Download workspace
        uses: actions/download-artifact@v3
        with:
          name: workspace

      - name: Set environment variable for publishing
        run: |
          $repo_name = "${{ github.event.repository.name }}"
          $csproj_path = "./$repo_name/RockLib.Collections.csproj"
          $csproj = [xml](Get-Content $csproj_path)
          $package_id = $csproj.SelectSingleNode("/Project/PropertyGroup/PackageId").InnerText
          $package_version = $csproj.SelectSingleNode("/Project/PropertyGroup/PackageVersion").InnerText
          $sln = Get-ChildItem "*.sln" -Name

          echo "REPO_NAME=$repo_name" >> $env:GITHUB_ENV
          echo "PACKAGE_ID=$package_id" >> $env:GITHUB_ENV
          echo "PACKAGE_VERSION=$package_version" >> $env:GITHUB_ENV
          echo "SLN_NAME=$sln" >> $env:GITHUB_ENV

          echo "repo        - $repo_name"
          echo "package id  - $package_id"
          echo "version     - $package_version"
          echo "solution    - $sln"

      - name: Package
        run: dotnet pack ${{ env.SLN_NAME }} --configuration Release --no-build
      
      # TODO: Need to actually publish the package (swap in commented code).
      - name: Publish
        run: echo "${{ env.REPO_NAME }}/bin/Release/${{ env.PACKAGE_ID }}.${{ env.PACKAGE_VERSION }}.nupkg"
        # env:
        #  API_KEY: ${{ secrets.[NUGET_API_KEY] }}
        # run: dotnet nuget push ${{ env.REPO_NAME }}/bin/Release/${{ env.PACKAGE_ID }}.${{ env.PACKAGE_VERSION }}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ env:API_KEY }}
